" ============================================================
" Vimrc. Author: WE.TapEr Version: 1.3
" For setting up Vim and Vimtex on Mac.
"
" ============================================================
"                   An Outline for this Vimrc
" ============================================================
" @1 The Default Settings (The default set by then Vim installer)
" @2 Plugins (For various plugins)
"   @2.1 For Vundle
"   @2.2 For vimtex
"   @2.3 For UltiSnips
"   @2.4 For Neocomplete
"   @
" @3 Vim UI Configuration (Adjusting the appearance of Vim, 
"                           specifically, the gVim)
" @4 Miscellaneous Settings 
" ================================================================
" @1 The Default Settings
set nocompatible

"
" ================================================================
"  @2  Plugins 
" ================================================================

" ================================================================
" @2.1 Below is for Vundle -- The Vim plugin manager
"
filetype off                  " required

" set the runtime path to include Vundle and initialize
" with modification shown in: https://github.com/VundleVim/Vundle.vim/wiki/Vundle-for-Windows
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
" call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

Plugin 'lervag/vimtex'
Plugin 'Shougo/neocomplete.vim'
Plugin 'Konfekt/FastFold'
Plugin 'nathanaelkane/vim-indent-guides'
Plugin 'godlygeek/tabular'
Plugin 'morhetz/gruvbox'
Plugin 'atelierbram/vim-colors_atelier-schemes'
Plugin 'vim-airline/vim-airline'
" =====================================================================
" Below is for Ultisnips only
"
    " Track the engine.
    Plugin 'SirVer/ultisnips'
    " Snippets are separated from the engine. Add this if you want them:
    Plugin 'honza/vim-snippets'

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
"filetype plugin on
" see :help vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line
" 
" ======================================================================


" =============================================================
" @2.2 For vimtex
" 1. Enable Skim(for Mac) reader to view the output pdf
" Note that the author lervag has prebuilt Skim synchronization into Vimtex.
" See: https://github.com/lervag/vimtex/issues/800
" But for backward search: You will also set up skim backward search in Skim's
" preference, and use the key combination: Command + Shift + Mouse Click to do
" backward search.
let g:vimtex_view_method = 'skim'
" The old fashion way to cooperate with Skim is kept here for referenece only:
" See https://sourceforge.net/p/skim-app/wiki/TeX_and_PDF_Synchronization/
" and the vimtex help for some reference.
"  -- Start --
" let g:vimtex_view_general_viewer =
"    \ '/Applications/Skim.app/Contents/SharedSupport/displayline'
" let g:vimtex_view_general_options = '@line @pdf @tex'
" This adds a callback hook that updates Skim after compilation
" let g:vimtex_latexmk_callback_hooks = ['UpdateSkim']
" function! UpdateSkim(status)
"   if !a:status | return | endif
" 
"   let l:out = b:vimtex.out()
"   let l:tex = expand('%:p')
"   let l:cmd = [g:vimtex_view_general_viewer, '-r']
"   if !empty(system('pgrep Skim'))
"     call extend(l:cmd, ['-g'])
"   endif
"   if has('nvim')
"     call jobstart(l:cmd + [line('.'), l:out, l:tex])
"   elseif has('job')
"     call job_start(l:cmd + [line('.'), l:out, l:tex])
"   else
"     call system(join(l:cmd + [line('.'), shellescape(l:out), shellescape(l:tex)], ' '))
"   endif
" endfunction
"  -- End --

" 2. Enable the keyboard shortcuts.
let maplocalleader = ","
" 3. Enable TeX-specific code folding.
let g:vimtex_fold_enabled=1
" let g:vimtex_fold_manual=0
" 4. Ignore certain Latex warnings
 let g:vimtex_quickfix_latexlog = {
        \ 'overfull' : 0,
        \ 'underfull' : 0,
        \}

" Clearing useless files when Vim quite, using Vimtex-clean
augroup CleaningDirtyTexFiles
    autocmd!
    "executes the command on quit
     autocmd VimLeave *.tex VimtexClean
augroup END

" =====================================================================
" @2.3 Below is also for UltiSnips
" 
    " Trigger configuration. Do not use <tab> if you use https://github.com/Valloric/YouCompleteMe.
let g:UltiSnipsExpandTrigger="<D-8>"
let g:UltiSnipsListSnippets="<c-tab>"
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"
" Add your own directory for your own snippets.
let g:UltiSnipsSnippetDirectories=['UltiSnips','~\Document\Draft\UltiSnips']
" If you want :UltiSnipsEdit to split your window.
    let g:UltiSnipsEditSplit="vertical"

" =====================================================================
" @2.4 Below is also for Neocomplete
" 
let g:neocomplete#enable_at_startup = 1
let g:neocomplete#enable_smart_case = 1
let g:neocomplete#sources#syntax#min_keyword_length = 3
" <TAB>: completion.
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
" Below is for neocomplete for cooperate with vimtex plugin
if !exists('g:neocomplete#sources#omni#input_patterns')
let g:neocomplete#sources#omni#input_patterns = {}
endif
let g:neocomplete#sources#omni#input_patterns.tex =
    \ '\v\\%('
    \ . '\a*cite\a*%(\s*\[[^]]*\]){0,2}\s*\{[^}]*'
    \ . '|\a*ref%(\s*\{[^}]*|range\s*\{[^,}]*%(}\{)?)'
    \ . '|hyperref\s*\[[^]]*'
    \ . '|includegraphics\*?%(\s*\[[^]]*\]){0,2}\s*\{[^}]*'
    \ . '|%(include%(only)?|input)\s*\{[^}]*'
    \ . '|\a*(gls|Gls|GLS)(pl)?\a*%(\s*\[[^]]*\]){0,2}\s*\{[^}]*'
    \ . '|includepdf%(\s*\[[^]]*\])?\s*\{[^}]*'
    \ . '|includestandalone%(\s*\[[^]]*\])?\s*\{[^}]*'
    \ . ')'

" =====================================================================
" @3 Vim UI Configuration
" 
" Change color according to the time of the day.
" Ref. P.197 of Learning the vi and Vim Editors (7th)
if strftime("%H") < 5 + 0
    set background=dark
    colorscheme Atelier_LakesideDark
elseif strftime("%H") < 12 + 0
    set background=light
    colorscheme Atelier_DuneLight
elseif strftime("%H") < 18 + 0
    set background=dark
    colorscheme Atelier_ForestDark
else
    set background=dark
    colorscheme Atelier_LakesideDark
endif
" Displaying line numbers.
set number
" ... and display them relative to the current position of cursor
set relativenumber
" Always show one more line on top or bottum, so that the editing
" experience is more continuous.
set scrolloff=1

" ================================================================
" @4 Miscellaneous Settings
"
" Replace <tab> with 2 spaces
set expandtab
set tabstop=2
set shiftwidth=2
" Making 'j' and 'k' work on visual line
nnoremap k gk
nnoremap j gj
nnoremap gk k
nnoremap gj j
" Making 'Shift-tab' to back-indentation
inoremap <S-tab> <C-d>
" Since '^' is more convenient than '0', exchange their roles
nnoremap ^ 0
nnoremap 0 ^
" Highlight search items, even when typing the searched terms
" This is enabled by default on gVim (Windows), but not on MacVim.
set hlsearch
" Show found items while typing to search
set incsearch
" For convenient Case search
set ignorecase
set smartcase
" For avoiding the \"~\" file clustering on my system
set backupdir-=.
set backupdir^=~/vim-backup-file
" For avoiding the \"un~\" file clustering on my system
set noundofile
" When Vim is split in my screen, the best textwidth is
set textwidth=80
" Search for visually selected text using key combination '//' 
vnoremap // y/<C-R>"<CR>

